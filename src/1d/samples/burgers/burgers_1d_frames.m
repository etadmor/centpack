function burgers_1d_frames(J,N)
%burgers_frames   Generates snapshots of solution of 1D Burgers' EQN 
%   
%   burgers_1d_frames(N,J) where J is the number of grid cells and N the total
%   number of outputs generated by CentPack, loads the output files of 
%   CentPack's  burgers_1d_SD3 example and plots the velocity profile at 
%   dt_out intervals over the length of the simulation
%	
%	CentPack's output is written to the directory 
%
%	CP_root/samples/burgers_1d_SD3/u_files/
%   
%	where CP_root stands for your CentPack installation directory.  The data
%	is loaded into matlab with the built-in load command and ploted over
%	the solution domain, the resulting image is written as a .png file to
%	the directory
% 
%	CP_root/samples/burgers_1d_SD3/u_frames/
%	
%	A number of open source tools is available to create an animated sequence
%	of the generated frames, one possiblitiy in UNIX-like systems is to run 
%	the following commands from the command window
%
%	> cd CP_root/samples/burgers_1d_SD3/u_frames/
%	> convert -adjoin -delay 5 *.png u_movie.gif
%
%	These will generate the animation u_movie.gif.
%
%	Remark: convert is a command line application of the poen source graphics
%	suite ImageMagick(C), commonly distributed with UNIX-like systems
%	
%	Copyright 2004-2010 Jorge Balbas and Eitan Tadmor 
%   $Revision: 1.0 $  $Date: 2010/04/14
%
caxis(caxis);

x = zeros(1,J);
dx = 2*pi/J;
x(1) = 0.5*dx;

for j=2:J
	x(j) = x(j-1) + dx;
end

for n = 0:N-1

	count = int2str(n);
	s_u = strcat('u_files/u_', count);
	
	if n < 10
		count = strcat('0', count);
	end;
	
	S_u = strcat('u_frames/u_', count);
	u = load(s_u);
	
	plot(x,u,'.-');
	axis([0.0 2*pi -0.8 1.5]);
	print ('-dpng', '-r0', S_u);

end;
