function euler_1d_frames(J,N)
%euler1d_frames   Generates snapshots of solution of 1D Euler's EQNs 
%   
%   euler1d_frames(J,N) where J is the number of grid cells and N the 
%   total number of outputs generated by CentPack, loads the output 
%   files of CentPack's euler_1d_SD2 example and plots the density, 
%   velocity, and pressure profiles at dt_out intervals over the length 
%   of the simulation
%	
%	CentPack's output is written to the directory 
%
%	CP_root/samples/euler_1d_SD2/rho_files/
%   CP_root/samples/euler_1d_SD2/u1_files/
%   CP_root/samples/euler_1d_SD2/p_files/
%
%	where CP_root stands for your CentPack installation directory.  The 
%   data is loaded into matlab with the built-in load command and ploted 
%	over the solution domain, the resulting images are written as a .png 
%	files to the directories
% 
%	CP_root/samples/euler_1d_SD2/rho_frames/
%	CP_root/samples/euler_1d_SD2/u_frames/
%	CP_root/samples/euler_1d_SD2/p_frames/
%	
%	A number of open source tools is available to create an animated 
%   sequence of the generated frames, one possiblitiy in UNIX-like systems 
%   is to run the following commands from the command window
%
%	> cd CP_root/samples/euler_1d_SD2/VAR_frames/  (VAR = rho, u, p)
%	> convert -adjoin -delay 5 *.png VAR_movie.gif
%
%	These will generate the animation VAR_movie.gif.
%
%	Remark: convert is a command line application of the poen source graphics
%	suite ImageMagick(C), commonly distributed with UNIX-like systems
%	
%	Copyright 2004-2010 Jorge Balbas and Eitan Tadmor 
%   $Revision: 1.0 $  $Date: 2010/04/14
%

caxis(caxis);

x = zeros(1,J);
dx = 1.0/J;

x(1) = 0.5*dx;

for j = 2:J
    x(j) = x(j-1) + dx;
end

for n = 0:N-1
	
	count = int2str(n);
	s_rho = strcat('rho_files/rho_', count);
	s_u = strcat('u1_files/u1_', count);
	s_p = strcat('p_files/p_', count);
	
	if n < 10
		count = strcat('0', count);
	end;
	
	S_rho = strcat('rho_frames/rho_', count);
	S_u = strcat('u_frames/u_', count);
	S_p = strcat('p_frames/p_', count);
	
	rho = load(s_rho);
	u = load(s_u);
	p = load(s_p);
	
	plot(x,rho,'.-');
	axis([0.0 1.0 0.1 1.05]);
	print ('-dpng', '-r0', S_rho);
	
	plot(x,u,'.-');
	axis([0.0 1.0 -0.05 1.0]);
	print ('-dpng', '-r0', S_u);
	
	plot(x,p,'.-');
	axis([0.0 1.0 0.05 1.05]);
	print ('-dpng', '-r0', S_p);

end;
